language: python

python:
- 3.5
- 3.6

before_install:
- pip install pipreqs
- pip install bumpversion

install:
- python setup.py install

before_script:
- pytest

script:
- echo "Finish Unittests"

jobs:
  include:

  - stage: "Create Development Builds"
    name: "develop"
    if: branch = develop
    before_script:
    - export RELEASE_ID=$(grep version setup.py  | awk -F= '{print $2}' | cut -f1-2 -d.|tr -d "'|\""| tr -d "," |xargs)
    - echo "TRAVIS_BRANCH = $TRAVIS_BRANCH  TRAVIS_TAG = $TRAVIS_TAG RELEASE = $RELEASE_ID "
    - git config --global user.email "builds@travis-ci.com"
    - git config --global user.name "Travis CI"
    - git config --global push.followTags true
    script:
    - |
      if [[ $TRAVIS_PULL_REQUEST == "false" ]]; then
        echo "Creating new development ${RELEASE_ID}"
        git checkout $TRAVIS_BRANCH
        pipreqs . --force
        export COMMIT_MSG="$(git log -1 --pretty=%B| xargs)"
        bumpversion patch --allow-dirty
        export NEW_VERSION="$(cat setup.py |grep version | awk -F"=|," '{print $2}' |sed -e s/\'//g |sed -e 's/ //g')"
        TAG_BODY="Build Version → $NEW_VERSION"
        git commit -a --amend -m "Added to [$NEW_VERSION] [skip ci] : - ${COMMIT_MSG}"
        git push -f "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
      fi
    before_deploy:
    - git tag -d "v${NEW_VERSION}.dev0" &>/dev/null || echo "No tag to clean"
    - git tag -a "v${NEW_VERSION}.dev0" -m "${TAG_BODY}"
    - git push --tags -f "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
    - python setup.py clean --all
    deploy:
    - provider: releases
      skip_cleanup: true
      prerelease: true
      api_key: "$GHT"
      file: directory/*
      on:
        branch: develop
    - provider: pypi
      user: $PYPI_USER
      password: $PYPI_PASSWORD
      server: https://test.pypi.org/legacy/
      on:
        branch: develop
    after_deploy:
    - git checkout -b "release/v${RELEASE_ID}"
    - git merge $TRAVIS_BRANCH
    - git reset --soft HEAD~1
    - git commit -a --amend -m "$COMMIT_MSG"
    - git push  -f "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"

  - stage: "Create Production Builds"
    name: "master"
    before_script:
    - export RELEASE_ID=$(grep version setup.py  | awk -F= '{print $2}' | cut -f1-2 -d.|tr -d "'|\""| tr -d "," |xargs)
    - echo "TRAVIS_BRANCH = $TRAVIS_BRANCH  TRAVIS_TAG = $TRAVIS_TAG RELEASE = $RELEASE_ID "
    - git config --global user.email "builds@travis-ci.com"
    - git config --global user.name "Travis CI"
    - git config --global push.followTags true
    - git fetch --all
    if: branch = master
    before_deploy:
    - python setup.py clean --all
    script:
    - |
      if [[ $TRAVIS_PULL_REQUEST == "false" ]]; then
        echo "Creating production release ${RELEASE_ID}"
        git checkout $TRAVIS_BRANCH
        export NEW_VERSION="$(cat setup.py |grep version | awk -F"=|," '{print $2}' |sed -e s/\'//g |sed -e 's/ //g')"
        git tag -l |grep $RELEASE_ID | xargs git tag -d && git push -f
        TAG_BODY="taskcat version → $NEW_VERSION"
        git tag -a "v${NEW_VERSION}" -m "${TAG_BODY}"
        git push --tags -f "https://$GHT:@github.com/$TRAVIS_REPO_SLUG"
      fi
    deploy:
    - provider: releases
      skip_cleanup: true
      prerelease: true
      api_key: "$GHT"
      file: directory/*
      on:
        branch: master
    - provider: pypi
      user: $PYPI_USER
      password: $PYPI_PASSWORD
      on:
        branch: master
        tags: true
